package com.erictoader.fooddelivery.bll;

import com.erictoader.fooddelivery.AdminGenerateReportsController;
import com.erictoader.fooddelivery.model.MenuItem;
import com.erictoader.fooddelivery.model.Order;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public final class ReportGenerator {
    private static Integer tIntervalReports = 0;
    private static Integer mOrderedReports = 0;
    private static Integer hSpendingReports = 0;
    private static Integer dProductReports = 0;

    public static void generateTimeIntervalReport(List<Order> selection, String startHour, String endHour, String username) {
        Document doc = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream("TimeIntervalReport" + tIntervalReports + ".pdf"));
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy, HH:mm:ss");
            LocalDateTime orderTime = LocalDateTime.now();
            doc.open();

            doc.add(new Paragraph("Time interval report with starting hour: " + startHour + " and end hour: " + endHour));
            doc.add(new Paragraph("Date and Time of report: " + dtf.format(orderTime)));
            doc.add(new Paragraph("Generated by: " + username));
            doc.add(new Paragraph(" "));

            int total = 0;
            for(Order o : selection) {
                doc.add(new Paragraph((total + 1) + ": Order ID: " + o.getOrderID() +
                        ", Client name: " + o.getClientName() +
                        ", Assigned employee: " + o.getAssignedEmployee()));
                doc.add(new Paragraph("Order contents: " + Constants.ds.getOrders().get(o)));
                doc.add(new Paragraph("Order date: " + o.getOrderDate() +
                        ", Order status: " + o.getStatus()));
                doc.add(new Paragraph(" "));
                total++;
            }
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("TOTAL: " + total));
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("Eric Toader - Food Delivery Management System"));
            doc.close();
            writer.close();
            tIntervalReports++;
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public static void generateMostOrdered(Map<MenuItem, Integer> selection, String min, String username) {
        Document doc = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream("MostOrderedProductsReport" + mOrderedReports + ".pdf"));
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy, HH:mm:ss");
            LocalDateTime orderTime = LocalDateTime.now();
            doc.open();

            doc.add(new Paragraph("Report of products that have been ordered more than " + min + " times"));
            doc.add(new Paragraph("Date and Time of report: " + dtf.format(orderTime)));
            doc.add(new Paragraph("Generated by: " + username));
            doc.add(new Paragraph(" "));

            int total = 0;
            for(MenuItem mi : selection.keySet()) {
                doc.add(new Paragraph((total + 1) + ": Item name: " + mi.getTitle() +
                        ", Number of times ordered: " + selection.get(mi) +
                        ", Price: " + mi.getPrice()));
                doc.add(new Paragraph("Calories: " + mi.getCalories() +
                        ", Protein: " + mi.getProtein() +
                        ", Fat: " + mi.getFat() +
                        ", Sodium: " + mi.getSodium() +
                        ", Rating: " + mi.getRating()));
                doc.add(new Paragraph(" "));
                total++;
            }
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("TOTAL: " + total));
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("Eric Toader - Food Delivery Management System"));
            doc.close();
            writer.close();
            mOrderedReports++;
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public static void generateClientsReport(Map<AdminGenerateReportsController.OrderByCustomer, Integer> selection, String minOrders, String minAmount, String username) {
        Document doc = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream("HighSpendingCustomersReport" + hSpendingReports + ".pdf"));
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy, HH:mm:ss");
            LocalDateTime orderTime = LocalDateTime.now();
            doc.open();

            doc.add(new Paragraph("Report of the clients that have ordered more than " + minOrders + " with bills larger than " + minAmount));
            doc.add(new Paragraph("Date and Time of report: " + dtf.format(orderTime)));
            doc.add(new Paragraph("Generated by: " + username));
            doc.add(new Paragraph(" "));

            int total = 0;
            for(AdminGenerateReportsController.OrderByCustomer c : selection.keySet()) {
                doc.add(new Paragraph((total + 1) + ": Client name: " + c.getCustomerName()));
                doc.add(new Paragraph("Amount of orders: " + selection.get(c)));
                doc.add(new Paragraph(" "));
                total++;
            }
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("TOTAL: " + total));
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("Eric Toader - Food Delivery Management System"));
            doc.close();
            writer.close();
            hSpendingReports++;
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public static void generateProductsWithinDay(HashMap<MenuItem, Integer> selection, String date, String username) {
        Document doc = new Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream("ProductOrderedByDay" + dProductReports + ".pdf"));
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy, HH:mm:ss");
            LocalDateTime orderTime = LocalDateTime.now();
            doc.open();

            doc.add(new Paragraph("Report of products that have been ordered during the specified date: " + date));
            doc.add(new Paragraph("Date and Time of report: " + dtf.format(orderTime)));
            doc.add(new Paragraph("Generated by: " + username));
            doc.add(new Paragraph(" "));

            int total = 0;
            for(MenuItem mi : selection.keySet()) {
                doc.add(new Paragraph((total + 1) + ": Item name: " + mi.getTitle() +
                        ", Number of times ordered: " + selection.get(mi) +
                        ", Price: " + mi.getPrice()));
                doc.add(new Paragraph("Calories: " + mi.getCalories() +
                        ", Protein: " + mi.getProtein() +
                        ", Fat: " + mi.getFat() +
                        ", Sodium: " + mi.getSodium() +
                        ", Rating: " + mi.getRating()));
                doc.add(new Paragraph(" "));
                total++;
            }
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("TOTAL: " + total));
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("Eric Toader - Food Delivery Management System"));
            doc.close();
            writer.close();
            dProductReports++;
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }
}
